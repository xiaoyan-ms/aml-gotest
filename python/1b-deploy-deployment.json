{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "annotationEhName": {
      "type": "string"
    },
    "codeDirRelPath": {
      "type": "string"
    },
    "condaFileContents": {
      "type": "string"
    },
    "datastore": {
      "type": "string"
    },
    "deployment": {
      "type": "string"
    },
    "ehNamespace": {
      "type": "string"
    },
    "endpoint": {
      "type": "string"
    },
    "environment": {
      "type": "string"
    },
    "globalResourceGroup": {
      "type": "string"
    },
    "globalUserAssignedIdentity": {
      "type": "string"
    },
    "imageUri": {
      "type": "string"
    },
    "includeCode": {
      "type": "bool",
      "metadata": {
        "description": "If true, using `scoringScript` and `condaFileContents`
        from 'datastore' to create AML code and environment resources. If false,
        deployment container already contains all code, entrypoint, and
        dependencies."
      }
    },
    "includeInferenceConfig": {
      "type": "bool"
    },
    "instanceCount": {
      "type": "int"
    },
    "instanceType": {
      "type": "string"
    },
    "livenessPath": {
      "type": "string"
    },
    "livenessPort": {
      "type": "int"
    },
    "maxConcurrentRequestsPerInstance": {
      "type": "int"
    },
    "modelDirRelPath": {
      "type": "string"
    },
    "name": {
      "type": "string"
    },
    "readinessPath": {
      "type": "string"
    },
    "readinessPort": {
      "type": "int"
    },
    "scoringPath": {
      "type": "string"
    },
    "scoringPort": {
      "type": "int"
    },
    "scoringScript": {
      "type": "string"
    },
    "sqlDatabase": {
      "type": "string"
    },
    "sqlServer": {
      "type": "string"
    },
    "structuredEventEhName": {
      "type": "string"
    },
    "auxStructuredEventEhName": {
      "type": "string"
    },
    "unstructuredEventEhName": {
      "type": "string"
    },
    "auxUnstructuredEventEhName": {
      "type": "string"
    },
    "workQueueEhName": {
      "type": "string"
    },
    "workspace": {
      "type": "string"
    },
    "mirrorTrafficTargetEndpoint": { 
      "type": "string",
      "metadata": {
        "description": "AML endpoint to which mirrored traffic will be forwarded."
      }
    },
    "version": {
      "type": "int"
    }
  },
  "variables": {
    "amlResourceName": "[concat(parameters('workspace'), '/', parameters('name'))]",
    "amlResourceVersionName": "[concat(variables('amlResourceName'), '/', parameters('version'))]",
    "codeVersionResourceId": "[resourceId('Microsoft.MachineLearningServices/workspaces/codes/versions', parameters('workspace'), parameters('name'), variables('versionStr'))]",
    "codeConfiguration": {
      "codeId": "[variables('codeVersionResourceId')]",
      "scoringScript": "[parameters('scoringScript')]"
    },
    "envVersionResourceId": "[resourceId('Microsoft.MachineLearningServices/workspaces/environments/versions', parameters('workspace'), parameters('name'), variables('versionStr'))]",
    "inferenceContainerProperties": {
      "livenessRoute": {
        "path": "[parameters('livenessPath')]",
        "port": "[parameters('livenessPort')]"
      },
      "readinessRoute": {
        "path": "[parameters('readinessPath')]",
        "port": "[parameters('readinessPort')]"
      },
      "scoringRoute": {
        "path": "[parameters('scoringPath')]",
        "port": "[parameters('scoringPort')]"
      }
    },
    "modelResourceId": "[resourceId('Microsoft.MachineLearningServices/workspaces/models', parameters('workspace'), parameters('name'))]",
    "modelVersionResourceId": "[resourceId('Microsoft.MachineLearningServices/workspaces/models/versions', parameters('workspace'), parameters('name'), variables('versionStr'))]",
    "versionStr": "[string(parameters('version'))]"
  },
  "resources": [
    {
      "type": "Microsoft.MachineLearningServices/workspaces/codes/versions",
      "condition": "[parameters('includeCode')]",
      "apiVersion": "2021-03-01-preview",
      "name": "[variables('amlResourceVersionName')]",
      "properties": {
        "datastoreId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.MachineLearningServices/workspaces/', parameters('workspace'), '/datastores/', parameters('datastore'))]",
        "path": "[parameters('codeDirRelPath')]",
        "properties": {}
      }
    },
    {
      "type": "Microsoft.MachineLearningServices/workspaces/environments/versions",
      "apiVersion": "2021-03-01-preview",
      "name": "[variables('amlResourceVersionName')]",
      "properties": {
        "isAnonymous": false,
        "docker": {
          "platform": {
            "operatingSystemType": "Linux"
          },
          "dockerSpecificationType": "Image",
          "dockerImageUri": "[parameters('imageUri')]"
        },
        "condaFile": "[if(parameters('includeCode'), parameters('condaFileContents'), json('null'))]",
        "inferenceContainerProperties": "[if(parameters('includeInferenceConfig'), variables('inferenceContainerProperties'), json('null'))]",
        "tags": {},
        "properties": {}
      }
    },
    {
      "type": "Microsoft.MachineLearningServices/workspaces/models",
      "apiVersion": "2021-03-01-preview",
      "name": "[variables('amlResourceName')]",
      "properties": {}
    },
    {
      "type": "Microsoft.MachineLearningServices/workspaces/models/versions",
      "apiVersion": "2021-03-01-preview",
      "name": "[variables('amlResourceVersionName')]",
      "properties": {
        "datastoreId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.MachineLearningServices/workspaces/', parameters('workspace'), '/datastores/', parameters('datastore'))]",
        "path": "[parameters('modelDirRelPath')]",
        "properties": {}
      },
      "dependsOn": [
        "[variables('modelResourceId')]"
      ]
    },
    {
      "type": "Microsoft.MachineLearningServices/workspaces/onlineEndpoints/deployments",
      "apiVersion": "2021-03-01-preview",
      "name": "[concat(parameters('workspace'), '/', parameters('endpoint'), '/', parameters('deployment'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('codeVersionResourceId')]",
        "[variables('envVersionResourceId')]",
        "[variables('modelVersionResourceId')]"
      ],
      "kind": "Managed",
      "properties": {
        "appInsightsEnabled": true,
        "codeConfiguration": "[if(parameters('includeCode'), variables('codeConfiguration'), json('null'))]",
        "endpointComputeType": "Managed",
        "environmentId": "[variables('envVersionResourceId')]",
        "environmentVariables": {
          "USING_AML": "true",
          "LOCATION": "[resourceGroup().location]",
          "REGION": "[resourceGroup().location]",
          "ENVIRONMENT": "[parameters('environment')]",
          "UAI_CLIENT_ID": "[reference(resourceId(parameters('globalResourceGroup'), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('globalUserAssignedIdentity')), '2018-11-30').clientId]",
          "PATTERNS_DB_USE_SI": "true",
          "PATTERNS_DB_CONN_STRING": "[concat('server=', parameters('sqlServer'), '.database.windows.net;database=', parameters('sqlDatabase'), ';ApplicationIntent=ReadOnly')]",
          "EVENTHUB_NAMESPACE": "[parameters('ehNamespace')]",
          "EVENTHUB_STRUCTURED": "[parameters('structuredEventEhName')]",
          "EVENTHUB_AUX_STRUCTURED": "[parameters('auxStructuredEventEhName')]",
          "EVENTHUB_UNSTRUCTURED": "[parameters('unstructuredEventEhName')]",
          "EVENTHUB_AUX_UNSTRUCTURED": "[parameters('auxUnstructuredEventEhName')]",
          "EVENTHUB_ASYNC_WORKITEMS": "[parameters('workQueueEhName')]",
          "EVENTHUB_ANNOTATE_RESULTS": "[parameters('annotationEhName')]",
          "ENDPOINT_NAME": "[parameters('endpoint')]",
          "DEPLOYMENT_NAME": "[parameters('deployment')]",
          "ENDPOINT_VERSION": "[parameters('version')]",
          "ROUTE_TARGET_ENDPOINT": "[parameters('mirrorTrafficTargetEndpoint')]"
        },
        "instanceType": "[parameters('instanceType')]",
        "livenessProbe": {
          "failureThreshold": 30,
          "successThreshold": 1,
          "timeout": "PT2S",
          "period": "PT10S",
          "initialDelay": "PT10S"
        },
        "model": {
          "referenceType": "Id",
          "assetId": "[variables('modelVersionResourceId')]"
        },
        "readinessProbe": {
          "failureThreshold": 30,
          "successThreshold": 1,
          "timeout": "PT2S",
          "period": "PT10S",
          "initialDelay": "PT10S"
        },
        "requestSettings": {
          "requestTimeout": "PT60S",
          "maxConcurrentRequestsPerInstance": "[parameters('maxConcurrentRequestsPerInstance')]"
        },
        "scaleSettings": {
          "scaleType": "Manual",
          "instanceCount": "[parameters('instanceCount')]"
        }
      }
    }
  ]
}